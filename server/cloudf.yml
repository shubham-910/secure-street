AWSTemplateFormatVersion: '2010-09-09'
Resources:
  LambdaFunction1:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: 'lamda-code-bucket'
        S3Key: 'match_face.zip'
      Runtime: python3.12
      Timeout: 60

  LambdaFunction2:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: 'lamda-code-bucket'
        S3Key: 'extract-text.zip'
      Runtime: python3.12
      Timeout: 60

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - s3:*
                  - rekognition:*
                  - textract:*
                  - execute-api:*
                  - apigateway:*
                Resource: "*"

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MyApi

  ApiGatewayResourceFace:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: compare-face

  ApiGatewayResourceText:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: extract-text

  ApiGatewayMethodFace:
    Type: AWS::ApiGateway::Method 
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref ApiGatewayResourceFace
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
        Type: AWS
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction1.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
  OptionsMethodFace:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId: !Ref ApiGatewayResourceFace
      RestApiId: !Ref ApiGatewayRestApi
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  
  ApiGatewayMethodText:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref ApiGatewayResourceText
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
        Type: AWS
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction2.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
  
  OptionsMethodText:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId: !Ref ApiGatewayResourceText
      RestApiId: !Ref ApiGatewayRestApi
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - ApiGatewayMethodFace
      - ApiGatewayMethodText
      - OptionsMethodText
      - OptionsMethodFace
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      Description: Deployment to V1
      StageName: v1

  APIGatewayInvokeLambda1:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction1
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: 992382367308

  APIGatewayInvokeLambda2:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction2
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: 992382367308


  EC2KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: Term-Project

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH, HTTP, and Client Application access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # Allow SSH access from anywhere (for demonstration purposes)
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  # Allow HTTP access from anywhere (for demonstration purposes)
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0  # Allow access to client application port from anywhere
        - IpProtocol: tcp
          FromPort: 7000
          ToPort: 7000
          CidrIp: 0.0.0.0/0  # Allow access to client application port from anywhere

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-051f8a213df8bc089
      InstanceType: t2.micro
      KeyName: !Ref EC2KeyPair
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          sudo yum update -y
          sudo yum install -y git

          git clone https://github.com/ku-nal/SecureStreet.git /home/ec2-user/SecureStreet

          cd /home/ec2-user/SecureStreet/server
          sudo yum install -y gcc-c++ make
          curl -sL https://rpm.nodesource.com/setup_20.x | sudo -E bash -
          sudo yum install -y nodejs
        
          sudo npm install
          npm start 

  S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: crimeb00961220

Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref EC2Instance
  PublicIpAddress:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt EC2Instance.PublicIp


